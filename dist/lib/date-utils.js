"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeIsBetween = exports.dateIsBetween = exports.dateHourIsBetween = void 0;

var _startOfDay = _interopRequireDefault(require("date-fns/startOfDay"));

var _isAfter = _interopRequireDefault(require("date-fns/isAfter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Helper function that uses date-fns methods to determine if a date is between two other dates
const dateHourIsBetween = (start, candidate, end) => (candidate.getTime() === start.getTime() || (0, _isAfter.default)(candidate, start)) && (candidate.getTime() === end.getTime() || (0, _isAfter.default)(end, candidate));

exports.dateHourIsBetween = dateHourIsBetween;

const dateIsBetween = (start, candidate, end) => {
  const startOfCandidate = (0, _startOfDay.default)(candidate);
  const startOfStart = (0, _startOfDay.default)(start);
  const startOfEnd = (0, _startOfDay.default)(end);
  return (startOfCandidate.getTime() === startOfStart.getTime() || (0, _isAfter.default)(startOfCandidate, startOfStart)) && (startOfCandidate.getTime() === startOfEnd.getTime() || (0, _isAfter.default)(startOfEnd, startOfCandidate));
};

exports.dateIsBetween = dateIsBetween;

const timeIsBetween = (start, candidate, end) => {
  const candidateTime = candidate.getHours() * 60 + candidate.getMinutes();
  const startTime = start.getHours() * 60 + start.getMinutes();
  const endTime = end.getHours() * 60 + end.getMinutes();
  return candidateTime >= startTime && candidateTime <= endTime;
};

exports.timeIsBetween = timeIsBetween;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZGF0ZS11dGlscy50cyJdLCJuYW1lcyI6WyJkYXRlSG91cklzQmV0d2VlbiIsInN0YXJ0IiwiY2FuZGlkYXRlIiwiZW5kIiwiZ2V0VGltZSIsImRhdGVJc0JldHdlZW4iLCJzdGFydE9mQ2FuZGlkYXRlIiwic3RhcnRPZlN0YXJ0Iiwic3RhcnRPZkVuZCIsInRpbWVJc0JldHdlZW4iLCJjYW5kaWRhdGVUaW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwic3RhcnRUaW1lIiwiZW5kVGltZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUE7QUFDTyxNQUFNQSxpQkFBaUIsR0FBRyxDQUFDQyxLQUFELEVBQWNDLFNBQWQsRUFBK0JDLEdBQS9CLEtBQy9CLENBQUNELFNBQVMsQ0FBQ0UsT0FBVixPQUF3QkgsS0FBSyxDQUFDRyxPQUFOLEVBQXhCLElBQTJDLHNCQUFRRixTQUFSLEVBQW1CRCxLQUFuQixDQUE1QyxNQUNDQyxTQUFTLENBQUNFLE9BQVYsT0FBd0JELEdBQUcsQ0FBQ0MsT0FBSixFQUF4QixJQUF5QyxzQkFBUUQsR0FBUixFQUFhRCxTQUFiLENBRDFDLENBREs7Ozs7QUFJQSxNQUFNRyxhQUFhLEdBQUcsQ0FBQ0osS0FBRCxFQUFjQyxTQUFkLEVBQStCQyxHQUEvQixLQUFzRDtBQUNqRixRQUFNRyxnQkFBZ0IsR0FBRyx5QkFBV0osU0FBWCxDQUF6QjtBQUNBLFFBQU1LLFlBQVksR0FBRyx5QkFBV04sS0FBWCxDQUFyQjtBQUNBLFFBQU1PLFVBQVUsR0FBRyx5QkFBV0wsR0FBWCxDQUFuQjtBQUVBLFNBQ0UsQ0FBQ0csZ0JBQWdCLENBQUNGLE9BQWpCLE9BQStCRyxZQUFZLENBQUNILE9BQWIsRUFBL0IsSUFBeUQsc0JBQVFFLGdCQUFSLEVBQTBCQyxZQUExQixDQUExRCxNQUNDRCxnQkFBZ0IsQ0FBQ0YsT0FBakIsT0FBK0JJLFVBQVUsQ0FBQ0osT0FBWCxFQUEvQixJQUF1RCxzQkFBUUksVUFBUixFQUFvQkYsZ0JBQXBCLENBRHhELENBREY7QUFJRCxDQVRNOzs7O0FBV0EsTUFBTUcsYUFBYSxHQUFHLENBQUNSLEtBQUQsRUFBY0MsU0FBZCxFQUErQkMsR0FBL0IsS0FBc0Q7QUFDakYsUUFBTU8sYUFBYSxHQUFHUixTQUFTLENBQUNTLFFBQVYsS0FBdUIsRUFBdkIsR0FBNEJULFNBQVMsQ0FBQ1UsVUFBVixFQUFsRDtBQUNBLFFBQU1DLFNBQVMsR0FBR1osS0FBSyxDQUFDVSxRQUFOLEtBQW1CLEVBQW5CLEdBQXdCVixLQUFLLENBQUNXLFVBQU4sRUFBMUM7QUFDQSxRQUFNRSxPQUFPLEdBQUdYLEdBQUcsQ0FBQ1EsUUFBSixLQUFpQixFQUFqQixHQUFzQlIsR0FBRyxDQUFDUyxVQUFKLEVBQXRDO0FBRUEsU0FBT0YsYUFBYSxJQUFJRyxTQUFqQixJQUE4QkgsYUFBYSxJQUFJSSxPQUF0RDtBQUNELENBTk0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RhcnRPZkRheSBmcm9tICdkYXRlLWZucy9zdGFydE9mRGF5J1xyXG5pbXBvcnQgaXNBZnRlciBmcm9tICdkYXRlLWZucy9pc0FmdGVyJ1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRoYXQgdXNlcyBkYXRlLWZucyBtZXRob2RzIHRvIGRldGVybWluZSBpZiBhIGRhdGUgaXMgYmV0d2VlbiB0d28gb3RoZXIgZGF0ZXNcclxuZXhwb3J0IGNvbnN0IGRhdGVIb3VySXNCZXR3ZWVuID0gKHN0YXJ0OiBEYXRlLCBjYW5kaWRhdGU6IERhdGUsIGVuZDogRGF0ZSk6IGJvb2xlYW4gPT5cclxuICAoY2FuZGlkYXRlLmdldFRpbWUoKSA9PT0gc3RhcnQuZ2V0VGltZSgpIHx8IGlzQWZ0ZXIoY2FuZGlkYXRlLCBzdGFydCkpICYmXHJcbiAgKGNhbmRpZGF0ZS5nZXRUaW1lKCkgPT09IGVuZC5nZXRUaW1lKCkgfHwgaXNBZnRlcihlbmQsIGNhbmRpZGF0ZSkpXHJcblxyXG5leHBvcnQgY29uc3QgZGF0ZUlzQmV0d2VlbiA9IChzdGFydDogRGF0ZSwgY2FuZGlkYXRlOiBEYXRlLCBlbmQ6IERhdGUpOiBib29sZWFuID0+IHtcclxuICBjb25zdCBzdGFydE9mQ2FuZGlkYXRlID0gc3RhcnRPZkRheShjYW5kaWRhdGUpXHJcbiAgY29uc3Qgc3RhcnRPZlN0YXJ0ID0gc3RhcnRPZkRheShzdGFydClcclxuICBjb25zdCBzdGFydE9mRW5kID0gc3RhcnRPZkRheShlbmQpXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICAoc3RhcnRPZkNhbmRpZGF0ZS5nZXRUaW1lKCkgPT09IHN0YXJ0T2ZTdGFydC5nZXRUaW1lKCkgfHwgaXNBZnRlcihzdGFydE9mQ2FuZGlkYXRlLCBzdGFydE9mU3RhcnQpKSAmJlxyXG4gICAgKHN0YXJ0T2ZDYW5kaWRhdGUuZ2V0VGltZSgpID09PSBzdGFydE9mRW5kLmdldFRpbWUoKSB8fCBpc0FmdGVyKHN0YXJ0T2ZFbmQsIHN0YXJ0T2ZDYW5kaWRhdGUpKVxyXG4gIClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHRpbWVJc0JldHdlZW4gPSAoc3RhcnQ6IERhdGUsIGNhbmRpZGF0ZTogRGF0ZSwgZW5kOiBEYXRlKTogYm9vbGVhbiA9PiB7XHJcbiAgY29uc3QgY2FuZGlkYXRlVGltZSA9IGNhbmRpZGF0ZS5nZXRIb3VycygpICogNjAgKyBjYW5kaWRhdGUuZ2V0TWludXRlcygpXHJcbiAgY29uc3Qgc3RhcnRUaW1lID0gc3RhcnQuZ2V0SG91cnMoKSAqIDYwICsgc3RhcnQuZ2V0TWludXRlcygpXHJcbiAgY29uc3QgZW5kVGltZSA9IGVuZC5nZXRIb3VycygpICogNjAgKyBlbmQuZ2V0TWludXRlcygpXHJcblxyXG4gIHJldHVybiBjYW5kaWRhdGVUaW1lID49IHN0YXJ0VGltZSAmJiBjYW5kaWRhdGVUaW1lIDw9IGVuZFRpbWVcclxufVxyXG4iXX0=